
name: Continuous Deployment

on:
  push:
    branches:
      - master
      - qa

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    strategy:
      matrix:
        node-version: [14.x]

    env:
      SOURCE_DIR: "build/"
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CI: false
    steps:
      - uses: actions/checkout@v3
      - name: Build
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - run: git config --global url."https://".insteadOf git://
      - run: yarn
      - run: REACT_APP_ENV=production yarn build

      - uses: benjlevesque/short-sha@v1.2
      - uses: elgohr/Publish-Docker-Github-Action@master
        name: Publish to Github Packages Registry
        with:
          name: ${{ secrets.DOCKER_REPOSITORY }}
          registry: docker.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
          dockerfile: Dockerfile
          tags: 0.1-${{ env.SHA }}

      - name: Configure SSH
        run: |
            mkdir -p ~/.ssh/
            echo "$SSH_KEY" > ~/.ssh/staging.key
            chmod 600 ~/.ssh/staging.key
            cat >>~/.ssh/config <<END
            Host staging
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/staging.key
              StrictHostKeyChecking no
            END
            echo "$SSH_HOST" > awsHost.key
            echo "$SSH_KEY" > test.key
            echo "$AWS_PASSWORD" > awsPassword.key
            echo "$DOCKER_PASSWORD" > dockerPassword.key
            echo "$DOCKER_USERNAME" > dockerUsername.key
            echo "$DOCKER_REPOSITORY" > dockerRepository.key
            echo "$SSH_HOST" > dockerHost.key
        env:
          SSH_USER: ${{ secrets.AWS_USERNAME }}
          SSH_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          AWS_PASSWORD: ${{ secrets.AWS_PASSWORD }}
          SSH_HOST: ${{ secrets.AWS_HOST }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Upload artifact4
        uses: actions/upload-artifact@v1.0.0
        with:
          name: SSH_HOST
          path: awsHost.key

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: AWS_PASSWORD
          path: awsPassword.key

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: AWS_PRIVATE_KEY
          path: test.key

      - name: Upload artifact2
        uses: actions/upload-artifact@v1.0.0
        with:
          name: DOCKER_ACCESS_TOKEN
          path: dockerPassword.key

      - name: Upload artifact3
        uses: actions/upload-artifact@v1.0.0
        with:
          name: DOCKER_USERNAME
          path: dockerUsername.key

      - name: Upload artifact4
        uses: actions/upload-artifact@v1.0.0
        with:
          name: DOCKER_REPOSITORY
          path: dockerRepository.key

      #- name: Stop the server
      - uses: benjlevesque/short-sha@v1.2
      - name: Deploy in Cluster
        env:
          DOCKER_TAG: ${{ steps.short-sha.outputs.sha }}
          SSH_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
        run: |
            ssh staging "cd /var/apps/frontend && docker-compose stop"
            ssh staging "cd /var/apps/frontend && APP_VERSION=0.1-$SHA docker-compose pull"
            ssh staging "cd /var/apps/frontend && APP_VERSION=0.1-$SHA docker-compose up -d"

  deploy-qa:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/qa'
    strategy:
      matrix:
        node-version: [14.x]

    env:
      SOURCE_DIR: "build/"
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CI: false
    steps:
      - uses: actions/checkout@v3
      - name: Build
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - run: git config --global url."https://".insteadOf git://
      - run: yarn
      - run: yarn run build:qa

      - uses: benjlevesque/short-sha@v1.2
      - uses: elgohr/Publish-Docker-Github-Action@master
        name: Publish to Github Packages Registry
        with:
          name: ${{ secrets.DOCKER_REPOSITORY }}
          registry: docker.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
          dockerfile: Dockerfile
          tags: 0.1-${{ env.SHA }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
          echo "$SSH_HOST" > awsHost.key
          echo "$SSH_KEY" > test.key
          echo "$AWS_PASSWORD" > awsPassword.key
          echo "$DOCKER_PASSWORD" > dockerPassword.key
          echo "$DOCKER_USERNAME" > dockerUsername.key
          echo "$DOCKER_REPOSITORY" > dockerRepository.key
          echo "$SSH_HOST" > dockerHost.key
        env:
          SSH_USER: ${{ secrets.AWS_USERNAME }}
          SSH_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          AWS_PASSWORD: ${{ secrets.AWS_PASSWORD }}
          SSH_HOST: ${{ secrets.AWS_HOST }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Upload artifact4
        uses: actions/upload-artifact@v1.0.0
        with:
          name: SSH_HOST
          path: awsHost.key

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: AWS_PASSWORD
          path: awsPassword.key

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: AWS_PRIVATE_KEY
          path: test.key

      - name: Upload artifact2
        uses: actions/upload-artifact@v1.0.0
        with:
          name: DOCKER_ACCESS_TOKEN
          path: dockerPassword.key

      - name: Upload artifact3
        uses: actions/upload-artifact@v1.0.0
        with:
          name: DOCKER_USERNAME
          path: dockerUsername.key

      - name: Upload artifact4
        uses: actions/upload-artifact@v1.0.0
        with:
          name: DOCKER_REPOSITORY
          path: dockerRepository.key

      #- name: Stop the server
      - uses: benjlevesque/short-sha@v1.2
      - name: Deploy in Cluster
        env:
          DOCKER_TAG: ${{ steps.short-sha.outputs.sha }}
          SSH_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
        run: |
          ssh staging "cd /var/apps/qa_frontend && docker-compose stop"
          ssh staging "cd /var/apps/qa_frontend && APP_VERSION=0.1-$SHA docker-compose pull"
          ssh staging "cd /var/apps/qa_frontend && APP_VERSION=0.1-$SHA docker-compose up -d"
